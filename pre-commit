#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

SWIFT_LINT_YAML=.swiftlint.yml
EXCLUDED=($(sed -nE '/excluded:/,/(^$|:$)/p' ${SWIFT_LINT_YAML} | grep -v ':' | grep -v -e '^[[:space:]]*$' | sed -e 's/  - //g'))
# Function to add files to Lint
contains () {
    local seeking=$1
    local in=1
    for element in "${EXCLUDED[@]}"; do
        if [ "$seeking" != "${seeking%$element*}" ]; then
            in=0
            break
        fi
    done
    return $in
}

function addFilesToLint {
    filename=""
    count=$2
    for item in $1
    do
      if [[ $item == *".swift"* ]]; then
        if contains $item; then
          continue
        fi
        filename+="$item"
        echo $filename
        export SCRIPT_INPUT_FILE_$count="$filename"
        count=$((count + 1))
        filename=""
      else
        filename+="$item "
      fi
    done
}
# Finding SwiftLint
LINT=$(which swiftlint)
if [[ -e "${LINT}" ]]; then
  echo "SwiftLint Start..."
else
  echo "SwiftLint does not exist, please download from https://github.com/realm/SwiftLint"
  exit 1
fi
count=0
# Getting files which are in commit and haven't been pushed yet
targets=$(git diff --stat --cached  --name-only $(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)) | grep -F ".swift")
addFilesToLint "${targets[0]}" $count
export -p | grep SCRIPT_INPUT_FILE
export SCRIPT_INPUT_FILE_COUNT=$count
RESULT=$($LINT lint --quiet --use-script-input-files)
if [ "$RESULT" == '' ]; then
  printf "\e[32mSwiftLint Finished.\e[39m\n"
else
  echo ""
  printf "\e[41mSwiftLint Failed.\e[49m Please check below:\n"
while read -r line; do
FILEPATH=$(echo $line | cut -d : -f 1)
    L=$(echo $line | cut -d : -f 2)
    C=$(echo $line | cut -d : -f 3)
    TYPE=$(echo $line | cut -d : -f 4 | cut -c 2-)
    MESSAGE=$(echo $line | cut -d : -f 5 | cut -c 2-)
    DESCRIPTION=$(echo $line | cut -d : -f 6 | cut -c 2-)
    if [ "$TYPE" == 'error' ]; then
      printf "\n  \e[31m$TYPE\e[39m\n"
    else
      printf "\n  \e[33m$TYPE\e[39m\n"
    fi
    printf "    \e[90m$FILEPATH:$L:$C\e[39m\n"
    printf "    $MESSAGE - $DESCRIPTION\n"
  done <<< "$RESULT"
printf "\PUSH ABORTED. Please fix them before pushing your code.\n"
exit 1
fi

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
